{
  "openapi": "3.0.0",
  "info": {
    "title": "Budget API Documentation",
    "description": "This is an Budget API. You'll need to create a session before run the endpoints.",
    "version": "1.0.0",
    "contact": {
      "email": "guilhermealbino33@gmail.com.br"
    }
  },
  "paths": {
    "/users": {
      "post": {
        "tags": ["User"],
        "summary": "Create a new user",
        "description": "Create a new user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User",
                "example": {
                  "email": "admin@email.com",
                  "password": "admin"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Bad request"
          },
          "400": {
            "description": "User already exists"
          }
        }
      },
      "get": {
        "tags": ["User"],
        "summary": "List all users",
        "description": "List all users",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user found!"
          }
        }
      }
    },
    "/users/{id}": {
      "patch": {
        "tags": ["User"],
        "summary": "Update a user",
        "description": "Update a user by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "name": "Altered user"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "User not found!"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete a user",
        "description": "Delete a user.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "User not found!"
          }
        }
      }
    },
    "/sessions": {
      "post": {
        "tags": ["Session"],
        "summary": "Create a session",
        "description": "Login with your user to get a token and run API tests.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "example": {
                  "email": "admin@email.com",
                  "password": "admin"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Not found"
          }
        }
      }
    },
    "/cities/": {
      "get": {
        "tags": ["City"],
        "summary": "List all cities",
        "description": "List all cities",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cities/{code}": {
      "get": {
        "tags": ["City"],
        "summary": "Get city by code",
        "description": "Get city by code",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "code",
            "in": "path",
            "description": "City code",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/cities/by-state/{state_code}": {
      "get": {
        "tags": ["City"],
        "summary": "List cities by state code",
        "description": "List cities by state code",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "state_code",
            "in": "path",
            "description": "State code",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/states/": {
      "get": {
        "tags": ["State"],
        "summary": "List all states",
        "description": "List all states",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/states/{code}": {
      "get": {
        "tags": ["State"],
        "summary": "Get state by code",
        "description": "Get state by code",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "code",
            "in": "path",
            "description": "State code",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": ["Category"],
        "summary": "Create a category",
        "description": "Create a new category",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "category name sample",
                  "description": "Category description sample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Category already exists"
          }
        }
      },
      "get": {
        "tags": ["Category"],
        "summary": "List all categories",
        "description": "List all categories",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "patch": {
        "tags": ["Category"],
        "summary": "Update a category",
        "description": "Update a category by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "example": {
                  "name": "Altered Category",
                  "description": "Altered category description sample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Category"],
        "summary": "Delete a category",
        "description": "Delete a category.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Category ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Category not found!"
          }
        }
      }
    },
    "/products": {
      "post": {
        "tags": ["Product"],
        "summary": "Create a product",
        "description": "Create a new product",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Product already exists"
          }
        }
      },
      "get": {
        "tags": ["Product"],
        "summary": "List all products",
        "description": "List all products",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/{id}": {
      "patch": {
        "tags": ["Product"],
        "summary": "Update a product",
        "description": "Update a product by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "example": {
                  "name": "Altered Product"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product",
        "description": "Delete a product.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Category not found!"
          }
        }
      }
    },
    "/products/images/{id}": {
      "post": {
        "tags": ["Product"],
        "summary": "Upload a product image",
        "description": "Upload product images",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Product ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "images": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Product not found!"
          }
        }
      },
      "delete": {
        "tags": ["Product"],
        "summary": "Delete a product image",
        "description": "Delete product images",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Image ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Image not found!"
          }
        }
      }
    },
    "/additional-items": {
      "post": {
        "tags": ["Additional-Item"],
        "summary": "Create a additional item",
        "description": "Create a new additional item",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdditionalItem"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Additional item already exists"
          }
        }
      },
      "get": {
        "tags": ["Additional-Item"],
        "summary": "List all additional items",
        "description": "List all additional items",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/additional-items/{id}": {
      "patch": {
        "tags": ["Additional-Item"],
        "summary": "Update an additional item",
        "description": "Update an additional item by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Additional item ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/AdditionalItem"
                  }
                },
                "example": {
                  "name": "Altered Additional Item"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Additional-Item"],
        "summary": "Delete an Additional item",
        "description": "Delete an additional item.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Additional item ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Additional item not found!"
          }
        }
      }
    },
    "/customers": {
      "post": {
        "tags": ["Customer"],
        "summary": "Create a customer",
        "description": "Create a new customer",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Person"
                  }
                },
                "example": {
                  "name": "John Doe",
                  "email": "john@email.com",
                  "cpf": "00.000.000-00",
                  "city_code": "4218707",
                  "address": "Av. Marcolino Martins Cabral",
                  "address_number": "111",
                  "cep": "88.700-000",
                  "phone_number_1": "3626-5555"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Customer already exists"
          }
        }
      },
      "get": {
        "tags": ["Customer"],
        "summary": "List all customers",
        "description": "List all customers",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "$ref": "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No customer found!"
          }
        }
      }
    },
    "/customers/{id}": {
      "patch": {
        "tags": ["Customer"],
        "summary": "Update a customer",
        "description": "Update a customer by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Person"
                  }
                },
                "example": {
                  "name": "João Silva"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Customer"],
        "summary": "Delete a customer",
        "description": "Delete a Customer.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Customer ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Customer not found!"
          }
        }
      }
    },
    "/salesmen": {
      "post": {
        "tags": ["Salesman"],
        "summary": "Create a salesman",
        "description": "Create a new salesman",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Person"
                  }
                },
                "example": {
                  "name": "John Sales",
                  "email": "john_sales@email.com",
                  "cpf": "88.999.000-00",
                  "city_code": "4218707",
                  "address": "Rua Marechal Teodoro",
                  "address_number": "1000",
                  "cep": "88.700-000",
                  "phone_number_1": "3626-4444"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Salesman already exists"
          }
        }
      },
      "get": {
        "tags": ["Salesman"],
        "summary": "List all salesmen",
        "description": "List all salesmen",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "object": {
                        "$ref": "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No salesmen not found!"
          }
        }
      }
    },
    "/salesmen/{id}": {
      "patch": {
        "tags": ["Salesman"],
        "summary": "Update a salesman",
        "description": "Update a salesman by id",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Salesman ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Person"
                  }
                },
                "example": {
                  "name": "João Sales"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": ["Salesman"],
        "summary": "Delete a salesman",
        "description": "Delete a Salesman.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Salesman ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Salesman not found!"
          }
        }
      }
    },
    "/budgets": {
      "post": {
        "tags": ["Budget"],
        "summary": "Create a budget",
        "description": "Create a new budget",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Budget"
              },
              "example": {
                "code": "0005",
                "customer_id": "6839ef59-1ac5-45dc-b0fe-f188eeb40252",
                "salesman_id": "f912ba6e-2b1d-4ddf-8a85-ad7c17a6d090",
                "delivery_type": "",
                "delivery_value": 150,
                "products": [
                  {
                    "product_id": "6f1fc144-8d9c-40cd-bdb0-b48de8ffa344",
                    "quantity": 2,
                    "unit_price": 200
                  }
                ],
                "additional_items": [
                  {
                    "additional_item_id": "044f4ee7-fbde-48e3-8e2d-13c112aae4d6",
                    "quantity": 1,
                    "unit_price": 200
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "400": {
            "description": "Budget already exists"
          }
        }
      },
      "get": {
        "tags": ["Budget"],
        "summary": "List all budgets",
        "description": "List all budgets",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/budgets/{id}": {
      "patch": {
        "tags": ["Budget"],
        "summary": "Update a budget",
        "description": "Update a budget.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Budget ID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Budget"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "A closed budget can not be updated!"
          },
          "404": {
            "description": "Budget not found!"
          }
        }
      },
      "delete": {
        "tags": ["Budget"],
        "summary": "Delete a budget",
        "description": "Delete an open budget.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Budget ID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "A closed budget can not be deleted!"
          },
          "404": {
            "description": "Budget not found!"
          }
        }
      }
    },
    "/budgets/open-close/{id}": {
      "patch": {
        "tags": ["Budget"],
        "summary": "Set budget open or closed",
        "description": "Open or close a budget. If it is opened, will close. It closed, will open.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "schema": { "type": "string" },
            "name": "id",
            "in": "path",
            "description": "Budget ID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "e-mail": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "password": {
            "type": "number"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "category_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "list_price": {
            "type": "number"
          },
          "size": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "AdditionalItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Person": {
        "type": "object",
        "description": "Used in Salesman and Customer",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "cpf": {
            "type": "string"
          },
          "city_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "address_number": {
            "type": "string"
          },
          "cep": {
            "type": "string"
          },
          "phone_number_1": {
            "type": "string"
          }
        }
      },
      "Budget": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "products": {
            "type": "array"
          },
          "additional_items": {
            "type": "array"
          },
          "customer_id": {
            "type": "string"
          },
          "salesman_id": {
            "type": "string"
          },
          "delivery_type": {
            "type": "string"
          },
          "delivery_value": {
            "type": "number"
          },
          "observations": {
            "type": "string"
          },
          "total_value": {
            "type": "number"
          }
        }
      }
    }
  },
  "servers": [
    { "url": "http://localhost:3033/api", "description": "API for tests" }
  ]
}
